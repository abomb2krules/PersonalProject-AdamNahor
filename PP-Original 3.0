<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>ASL to English Translator</title>
    <style>
        *{
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: sans-serif;
        }
        body {
        background: #0a415b;
        display: flex;
        flex-direction: column;
        margin: 0 50px;
        }

        .main{
        display: flex;
        justify-content: center;
        align-items: center;
        }

        .title {
        color: white;
        text-align: center;
        padding: 30px 0;
        }

        .camera{
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: white;
        height: 750px;
        width: 750px;
        border-radius: 20px;
        box-shadow: 0px 0px 17px -4px rgba(255,255,255,1);
        }

        .webcam{
        background-color: black;
        height: 650px;
        width: 650px;
        border-radius: 10px;
        }

        .button{
        background-color: white;
        height: 50px;
        width: 750px;
        border-radius: 10px;
        margin: 9px 0 0 0;
        }

        .top-right{
        background-color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 600px;
        width: 200px;
        border-radius: 10px;
        margin: 0 0 0 50px;
        box-shadow: 0px 0px 17px -4px rgba(255,255,255,1);
        }

        .bottom-right{
        background-color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
        width: 200px;
        border-radius: 10px;
        margin: 9px 0 0 50px;
        box-shadow: 0px 0px 17px -4px rgba(255,255,255,1);
        }

        .guess{
            font-size: 100px;
        }

        .label-container{
            display: flex;
            flex-direction: column;
            padding: 4px;
        }
        .label-container > div{
            font-size: 16px;
            font-weight: bold;
            margin: 1px;
            padding: 1px;
        }

        .label-size{

            display: flex;
            flex-direction: column;
            color: white;
            padding: 4px;
        }

        .label-size > div{
            margin: 1px;
            padding: 1px;
            background-color: #0a415b;
            border-radius: 5px;
        }
        
    </style>

    <!-- import the webpage's stylesheet -->
    <link rel="stylesheet" href="/style.css" />

    <!-- import the webpage's javascript file -->
    <script src="/script.js" defer></script>
  </head>
  <body>
    <div class="top">
        <h1 class="title">THE THIRD EYE</h1>
      </div>
      <div class="main">
        <div class="left">
          <div class="camera">
            <div class="webcam" id="webcam-container"></div>
          </div>
          <button class="button" onclick="startStop()">Start/Stop Camera</button>
        </div>
        <div class="right">
          <div class="top-right">
            <div class="label-container" id="label-container"></div>
            <div class="label-size" id="label-size"></div>
          </div>
          <div class="bottom-right">
            <div class="guess" id="guess"></div>
          </div>
        </div>
      </div>

<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script type="text/javascript">
    // More API functions here:
    // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/B16CIgb-g/";

    let model, webcam, labelContainer, maxPredictions, letter;

    let shouldInit = true;
    let shouldLoop = false;

    async function startStop() {
    	if(shouldInit) {
    		await init()
    		shouldInit = false;
    	}

    	shouldLoop = !shouldLoop;
    	if(shouldLoop) {
    		await webcam.play();
        window.requestAnimationFrame(loop);
    	} else {
    		await webcam.pause();
    	}
    }
    // Load the image model and setup the webcam
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(650, 650, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        
        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        labelContainer = document.getElementById("label-container");
        labelSize = document.getElementById("label-size");
        guess = document.getElementById("guess");
        for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
            labelSize.appendChild(document.createElement("div"));
        }
    }

    async function loop() {
        webcam.update(); // update the webcam frame
        await predict();
        window.requestAnimationFrame(loop);
    }

    // run the webcam image through the image model
    async function predict() {
        // predict can take in an image, video or canvas html element
        let x = 0;
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
                prediction[i].className;
            labelContainer.childNodes[i].innerHTML = classPrediction;
            labelSize.childNodes[i].innerHTML = (prediction[i].probability * 100).toFixed(0) + "%";

            if(prediction[i].probability > x){
                x = prediction[i].probability;
                guess.innerHTML = prediction[i].className;
            }
        }
    }

</script>

  </body>
</html>
